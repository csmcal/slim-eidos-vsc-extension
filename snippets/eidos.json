{
    "Initialize Basic SLiM Script": {
        "prefix": "init",
        "body": [
            "initialize() {",
            "\tinitializeMutationType(\"m1\", ${1:0.5}, \"f\", ${2:0.0});",
            "\tinitializeGenomicElementType(\"g1\", m1, 1.0);",
            "\tinitializeGenomicElement(g1, 0, ${3:999});",
            "\tinitializeMutationRate(${4:1e-7});",
            "\tinitializeRecombinationRate(${5:1e-8});",
            "}"
        ],
        "description": "Initialize a basic SLiM simulation"
    },

    "Initialize Sexual Population": {
        "prefix": "init-sexual",
        "body": [
            "initialize() {",
            "\tinitializeSex(\"A\");",
            "\tinitializeMutationType(\"m1\", ${1:0.5}, \"f\", ${2:0.0});",
            "\tinitializeGenomicElementType(\"g1\", m1, 1.0);",
            "\tinitializeGenomicElement(g1, 0, ${3:999});",
            "\tinitializeMutationRate(${4:1e-7});",
            "\tinitializeRecombinationRate(${5:1e-8});",
            "}"
        ],
        "description": "Initialize a SLiM simulation with sexual reproduction"
    },

    "Generation Callback": {
        "prefix": "gen",
        "body": [
            "${1:1} {",
            "\t${2:// Generation code here}",
            "}"
        ],
        "description": "Add a generation callback"
    },

    "Early Generation Callback": {
        "prefix": "early",
        "body": [
            "${1:1} early() {",
            "\t${2:// Early generation code here}",
            "}"
        ],
        "description": "Add an early generation callback"
    },

    "Late Generation Callback": {
        "prefix": "late",
        "body": [
            "${1:1} late() {",
            "\t${2:// Late generation code here}",
            "}"
        ],
        "description": "Add a late generation callback"
    },

    "Fitness Callback": {
        "prefix": "fitness",
        "body": [
            "fitness(${1:m1}) {",
            "\treturn ${2:1.0 + sum(individual.genomes.mutationsOfType(m1))};",
            "}"
        ],
        "description": "Add a fitness callback"
    },

    "Mating Callback": {
        "prefix": "mating",
        "body": [
            "mating() {",
            "\tparent1 = subpop.sampleIndividuals(1);",
            "\tparent2 = subpop.sampleIndividuals(1);",
            "\treturn c(parent1.index, parent2.index);",
            "}"
        ],
        "description": "Add a mating callback"
    },

    "Mutation Type": {
        "prefix": "muttype",
        "body": [
            "initializeMutationType(\"${1:m1}\", ${2:0.5}, \"${3:f}\", ${4:0.0});"
        ],
        "description": "Initialize a mutation type"
    },

    "Add Subpopulation": {
        "prefix": "addsubpop",
        "body": [
            "sim.addSubpop(\"${1:p1}\", ${2:500});"
        ],
        "description": "Add a subpopulation"
    },

    "Sample Individuals": {
        "prefix": "sample",
        "body": [
            "${1:p1}.sampleIndividuals(${2:10});"
        ],
        "description": "Sample individuals from a population"
    },

    "Output Statistics": {
        "prefix": "stats",
        "body": [
            "stats = sim.summarizeStats();",
            "catn(\"Generation: \" + sim.generation);",
            "catn(\"Population size: \" + size(sim.subpopulations.individuals));",
            "catn(\"Number of mutations: \" + size(sim.mutations));"
        ],
        "description": "Output basic simulation statistics"
    },

    "Save Population": {
        "prefix": "save",
        "body": [
            "sim.outputFull(\"${1:pop_gen_}\" + sim.generation + \".txt\");"
        ],
        "description": "Save full population state"
    },

    "For Loop": {
        "prefix": "for",
        "body": [
            "for (${1:i} in ${2:0:9}) {",
            "\t${3:// code}",
            "}"
        ],
        "description": "For loop in Eidos"
    },

    "If Statement": {
        "prefix": "if",
        "body": [
            "if (${1:condition}) {",
            "\t${2:// code}",
            "}"
        ],
        "description": "If statement in Eidos"
    },

    "While Loop": {
        "prefix": "while",
        "body": [
            "while (${1:condition}) {",
            "\t${2:// code}",
            "}"
        ],
        "description": "While loop in Eidos"
    },

    "Spatial Population": {
        "prefix": "spatial",
        "body": [
            "initialize() {",
            "\tinitializeSLiMOptions(dimensionality=\"${1:xy}\");",
            "\tinitializeMutationType(\"m1\", 0.5, \"f\", 0.0);",
            "\tinitializeGenomicElementType(\"g1\", m1, 1.0);",
            "\tinitializeGenomicElement(g1, 0, 999);",
            "\tinitializeMutationRate(1e-7);",
            "\tinitializeRecombinationRate(1e-8);",
            "}",
            "",
            "1 early() {",
            "\tsim.addSubpop(\"p1\", 500);",
            "\tp1.setSpatialBounds(c(${2:0.0}, ${3:0.0}), c(${4:10.0}, ${5:10.0}));",
            "}"
        ],
        "description": "Initialize a spatial population"
    },

    "Migration Rate": {
        "prefix": "migrate",
        "body": [
            "${1:p1}.setMigrationRates(${2:p2}, ${3:0.1});"
        ],
        "description": "Set migration rate between populations"
    },

    "Initialize Nucleotide Model": {
        "prefix": "init-nuc",
        "body": [
            "initialize() {",
            "\tinitializeSLiMOptions(nucleotideBased=T);",
            "\t",
            "\t// Define mutation types for different nucleotide effects",
            "\tinitializeMutationType(\"m1\", 0.5, \"f\", 0.0);  // neutral",
            "\tinitializeMutationType(\"m2\", 0.1, \"g\", -0.1, 0.5);  // deleterious",
            "\tinitializeMutationType(\"m3\", 0.1, \"e\", 0.1);  // beneficial",
            "\t",
            "\t// Initialize nucleotide sequences",
            "\tseq = randomNucleotides(${1:1000});  // random sequence",
            "\t",
            "\t// Define genomic element types",
            "\tinitializeGenomicElementType(\"g1\", c(m1,m2,m3), c(0.7,0.2,0.1));  // coding",
            "\tinitializeGenomicElementType(\"g2\", m1, 1.0);  // non-coding",
            "\t",
            "\t// Set up genomic elements",
            "\tinitializeGenomicElement(g1, 0, ${2:499});  // coding region",
            "\tinitializeGenomicElement(g2, ${3:500}, ${4:999});  // non-coding region",
            "\t",
            "\t// Set mutation and recombination rates",
            "\tinitializeMutationRate(${5:1e-8});",
            "\tinitializeRecombinationRate(${6:1e-8});",
            "\t",
            "\t// Set nucleotide mutation parameters",
            "\tinitializeNucleotideMutationRate(1e-8);",
            "\tinitializeNucleotideMatrix(\"${7:A2T_BIAS}\");  // or custom matrix",
            "}"
        ],
        "description": "Initialize a nucleotide-based model with coding and non-coding regions"
    },

    "Initialize Codon Model": {
        "prefix": "init-codon",
        "body": [
            "initialize() {",
            "\tinitializeSLiMOptions(nucleotideBased=T, codonsUsed=T);",
            "\t",
            "\t// Define mutation types for different effects",
            "\tinitializeMutationType(\"m1\", 0.5, \"f\", 0.0);  // synonymous",
            "\tinitializeMutationType(\"m2\", 0.1, \"g\", -0.5, 0.1);  // nonsynonymous deleterious",
            "\tinitializeMutationType(\"m3\", 0.01, \"e\", 0.1);  // nonsynonymous beneficial",
            "\t",
            "\t// Initialize coding sequence",
            "\tcodingSeq = codonsToNucleotides(randomCodons(${1:333}));  // 1000bp coding sequence",
            "\t",
            "\t// Define genomic element types",
            "\tinitializeGenomicElementType(\"g1\", c(m1,m2,m3), c(0.7,0.25,0.05));",
            "\t",
            "\t// Set up genomic elements",
            "\tinitializeGenomicElement(g1, 0, ${2:999});",
            "\t",
            "\t// Set mutation and recombination rates",
            "\tinitializeMutationRate(${3:1e-8});",
            "\tinitializeRecombinationRate(${4:1e-8});",
            "\t",
            "\t// Set codon-specific parameters",
            "\tinitializeCodonTable(\"${5:STANDARD}\");  // or custom table",
            "\tinitializeAminoAcidMutationMatrix(\"${6:PAM}\");  // or custom matrix",
            "}"
        ],
        "description": "Initialize a codon-based model with amino acid effects"
    },

    "RNA Structure Model": {
        "prefix": "init-rna",
        "body": [
            "initialize() {",
            "\tinitializeSLiMOptions(nucleotideBased=T);",
            "\t",
            "\t// Define mutation types",
            "\tinitializeMutationType(\"m1\", 0.5, \"f\", 0.0);  // neutral",
            "\tinitializeMutationType(\"m2\", 0.1, \"g\", -0.1, 0.5);  // structure-disrupting",
            "\t",
            "\t// Initialize RNA sequence with known structure",
            "\tseq = \"${1:GCGGATTTAGCTCAGTTGGGAGAGCGCCAGACTGAAGATCTGGAGGTCCTGTGTTCGATCCACAGAATTCGCA}\";",
            "\tstructure = \"${2:(((((((..((((.........)))).(((((.......))))).....(((((.......))))))))))))}\";",
            "\t",
            "\t// Define genomic element types",
            "\tinitializeGenomicElementType(\"g1\", c(m1,m2), c(0.8,0.2));",
            "\t",
            "\t// Set up genomic elements",
            "\tinitializeGenomicElement(g1, 0, ${3:74});",
            "\t",
            "\t// Set mutation parameters",
            "\tinitializeMutationRate(${4:1e-8});",
            "\t",
            "\t// Custom fitness callback for RNA structure",
            "\tinitializeCallback(\"fitness(m2)\", \"{ return 1.0 - individual.countMutationsAffectingStructure(); }\");",
            "}"
        ],
        "description": "Initialize a model for RNA structure evolution"
    },

    "Protein Domain Model": {
        "prefix": "init-protein",
        "body": [
            "initialize() {",
            "\tinitializeSLiMOptions(nucleotideBased=T, codonsUsed=T);",
            "\t",
            "\t// Define mutation types for different protein regions",
            "\tinitializeMutationType(\"m1\", 0.5, \"f\", 0.0);  // neutral",
            "\tinitializeMutationType(\"m2\", 0.1, \"g\", -0.5, 0.1);  // conserved domain",
            "\tinitializeMutationType(\"m3\", 0.2, \"g\", -0.2, 0.2);  // variable region",
            "\t",
            "\t// Define genomic element types for different domains",
            "\tinitializeGenomicElementType(\"g1\", m2, 1.0);  // conserved domain",
            "\tinitializeGenomicElementType(\"g2\", m3, 1.0);  // variable region",
            "\tinitializeGenomicElementType(\"g3\", m1, 1.0);  // linker region",
            "\t",
            "\t// Set up protein domains",
            "\tinitializeGenomicElement(g1, 0, ${1:299});      // N-terminal domain",
            "\tinitializeGenomicElement(g2, ${2:300}, ${3:599});  // variable region",
            "\tinitializeGenomicElement(g1, ${4:600}, ${5:899});  // C-terminal domain",
            "\t",
            "\t// Set mutation parameters",
            "\tinitializeMutationRate(${6:1e-8});",
            "\tinitializeRecombinationRate(${7:1e-8});",
            "\t",
            "\t// Set protein-specific parameters",
            "\tinitializeCodonTable(\"STANDARD\");",
            "\tinitializeAminoAcidMutationMatrix(\"BLOSUM62\");",
            "}"
        ],
        "description": "Initialize a model for protein domain evolution"
    },

    "Population Structure with Selection": {
        "prefix": "init-metapop",
        "body": [
            "initialize() {",
            "\t// Initialize mutation types",
            "\tinitializeMutationType(\"m1\", 0.5, \"f\", 0.0);  // neutral",
            "\tinitializeMutationType(\"m2\", 0.5, \"n\", 0.0, ${1:0.1});  // locally adaptive",
            "\t",
            "\t// Set up genomic elements",
            "\tinitializeGenomicElementType(\"g1\", c(m1,m2), c(0.9,0.1));",
            "\tinitializeGenomicElement(g1, 0, ${2:99999});",
            "\t",
            "\t// Set rates",
            "\tinitializeMutationRate(${3:1e-7});",
            "\tinitializeRecombinationRate(${4:1e-8});",
            "\t",
            "\t// Define fitness effects",
            "\tm2.convertToSubstitution = T;",
            "\tm2.color = \"red\";",
            "}",
            "",
            "1 early() {",
            "\t// Create subpopulations with different selective pressures",
            "\tsim.addSubpop(\"p1\", ${5:1000});",
            "\tsim.addSubpop(\"p2\", ${6:1000});",
            "\t",
            "\t// Set migration rates",
            "\tp1.setMigrationRates(p2, ${7:0.01});",
            "\tp2.setMigrationRates(p1, ${8:0.01});",
            "}",
            "",
            "// Fitness callbacks for different environments",
            "fitness(m2) {",
            "\tif (subpop.id == 1)",
            "\t\treturn 1.0 + sum(individual.genomes.mutationsOfType(m2)) * ${9:0.1};",
            "\telse",
            "\t\treturn 1.0 - sum(individual.genomes.mutationsOfType(m2)) * ${10:0.1};",
            "}"
        ],
        "description": "Initialize a model with population structure and local adaptation"
    },

    "Adaptive Walk Model": {
        "prefix": "init-adaptive",
        "body": [
            "initialize() {",
            "\t// Initialize mutation types",
            "\tinitializeMutationType(\"m1\", 0.5, \"f\", 0.0);  // neutral",
            "\tinitializeMutationType(\"m2\", 1.0, \"e\", 0.1);  // beneficial",
            "\tinitializeMutationType(\"m3\", 0.2, \"g\", -0.03, 0.2);  // deleterious",
            "\t",
            "\t// Set up genomic elements",
            "\tinitializeGenomicElementType(\"g1\", c(m1,m2,m3), c(0.9,0.01,0.09));",
            "\tinitializeGenomicElement(g1, 0, ${1:99999});",
            "\t",
            "\t// Set rates",
            "\tinitializeMutationRate(${2:1e-7});",
            "\tinitializeRecombinationRate(${3:1e-8});",
            "\t",
            "\t// Define fitness scaling",
            "\tm2.convertToSubstitution = T;",
            "\tm2.color = \"green\";",
            "\tm3.color = \"red\";",
            "}",
            "",
            "1 early() {",
            "\tsim.addSubpop(\"p1\", ${4:1000});",
            "}",
            "",
            "// Track adaptive walk",
            "${5:100} late() {",
            "\t// Output statistics",
            "\tmeanFitness = mean(p1.individuals.fitness);",
            "\tfixedBeneficial = sum(sim.substitutions.mutationType == m2);",
            "\tfixedDeleterious = sum(sim.substitutions.mutationType == m3);",
            "\t",
            "\tcatn(sim.generation + \": mean fitness = \" + meanFitness);",
            "\tcatn(\"\\tfixed: \" + fixedBeneficial + \" beneficial, \" + fixedDeleterious + \" deleterious\");",
            "\t",
            "\t// Optional: terminate when fitness plateau reached",
            "\tif (meanFitness > ${6:2.0})",
            "\t\tsim.simulationFinished();",
            "}"
        ],
        "description": "Initialize a model for studying adaptive walks"
    },

    "Tree Sequence Recording": {
        "prefix": "init-ts",
        "body": [
            "initialize() {",
            "\t// Enable tree sequence recording",
            "\tinitializeSLiMOptions(keepPedigrees=T, dimensionality=\"x\");",
            "\t",
            "\t// Initialize mutation types",
            "\tinitializeMutationType(\"m1\", 0.5, \"f\", 0.0);",
            "\t",
            "\t// Set up genomic elements",
            "\tinitializeGenomicElementType(\"g1\", m1, 1.0);",
            "\tinitializeGenomicElement(g1, 0, ${1:99999});",
            "\tinitializeMutationRate(${2:1e-7});",
            "\tinitializeRecombinationRate(${3:1e-8});",
            "\t",
            "\t// Set up output for tree sequence",
            "\tsim.treeSeqOutput = \"${4:trees.trees}\";",
            "}",
            "",
            "1 early() {",
            "\tsim.addSubpop(\"p1\", ${5:1000});",
            "}",
            "",
            "${6:2000} late() {",
            "\t// Simplify tree sequence periodically",
            "\tsim.treeSeqRememberIndividuals(p1.sampleIndividuals(${7:100}));",
            "\tsim.treeSeqSimplify();",
            "}"
        ],
        "description": "Initialize a model with tree sequence recording for coalescent analysis"
    },

    "Quantitative Trait": {
        "prefix": "init-qtl",
        "body": [
            "initialize() {",
            "\t// Initialize mutation types for QTL",
            "\tinitializeMutationType(\"m1\", 0.5, \"f\", 0.0);  // neutral",
            "\tinitializeMutationType(\"m2\", 0.5, \"n\", 0.0, ${1:0.1});  // QTL effect sizes",
            "\t",
            "\t// Set up genomic elements",
            "\tinitializeGenomicElementType(\"g1\", c(m1,m2), c(0.95,0.05));",
            "\tinitializeGenomicElement(g1, 0, ${2:99999});",
            "\tinitializeMutationRate(${3:1e-7});",
            "\tinitializeRecombinationRate(${4:1e-8});",
            "\t",
            "\t// Define constants",
            "\tdefineConstant(\"optimum\", ${5:10.0});  // optimum trait value",
            "\tdefineConstant(\"W\", ${6:5.0});  // selection strength",
            "}",
            "",
            "1 early() {",
            "\tsim.addSubpop(\"p1\", ${7:1000});",
            "}",
            "",
            "// Calculate phenotype and fitness",
            "fitness(NULL) {",
            "\t// Sum effect sizes for phenotype",
            "\tphenotype = sum(individual.genomes.mutationsOfType(m2).selectionCoeff);",
            "\t",
            "\t// Gaussian stabilizing selection",
            "\treturn exp(-0.5 * ((phenotype - optimum) / W)^2);",
            "}",
            "",
            "// Output phenotype distribution",
            "${8:100} late() {",
            "\tphenotypes = sapply(p1.individuals, \"sum(applyValue.genomes.mutationsOfType(m2).selectionCoeff)\");",
            "\tcatn(sim.generation + \": mean = \" + mean(phenotypes) + \", sd = \" + sd(phenotypes));",
            "}"
        ],
        "description": "Initialize a quantitative trait model with stabilizing selection"
    },

    "Selective Sweep": {
        "prefix": "init-sweep",
        "body": [
            "initialize() {",
            "\t// Initialize mutation types",
            "\tinitializeMutationType(\"m1\", 0.5, \"f\", 0.0);  // neutral",
            "\tinitializeMutationType(\"m2\", 1.0, \"f\", ${1:0.1});  // beneficial",
            "\t",
            "\t// Set up genomic elements",
            "\tinitializeGenomicElementType(\"g1\", m1, 1.0);",
            "\tinitializeGenomicElement(g1, 0, ${2:99999});",
            "\tinitializeMutationRate(${3:1e-7});",
            "\tinitializeRecombinationRate(${4:1e-8});",
            "\t",
            "\t// Track sweep mutation",
            "\tm2.convertToSubstitution = F;",
            "\tm2.color = \"red\";",
            "}",
            "",
            "1 early() {",
            "\tsim.addSubpop(\"p1\", ${5:1000});",
            "}",
            "",
            "// Add beneficial mutation",
            "${6:100} early() {",
            "\t// Add mutation at specific position",
            "\ttarget = sample(p1.individuals, 1);",
            "\ttarget.genome1.addNewDrawnMutation(m2, ${7:50000});",
            "}",
            "",
            "// Track sweep progress",
            "${8:100}:${9:500} late() {",
            "\tsweepMuts = sim.mutationsOfType(m2);",
            "\tif (size(sweepMuts)) {",
            "\t\tfreq = sim.mutationFrequencies(NULL, sweepMuts);",
            "\t\tcatn(sim.generation + \": frequency = \" + freq);",
            "\t\t",
            "\t\t// Optional: calculate statistics around sweep",
            "\t\tif (freq >= 0.99) {",
            "\t\t\tcatn(\"Sweep completed at generation \" + sim.generation);",
            "\t\t\tsim.simulationFinished();",
            "\t\t}",
            "\t}",
            "}"
        ],
        "description": "Initialize a model to study selective sweeps"
    },

    "Demographic History": {
        "prefix": "init-demog",
        "body": [
            "initialize() {",
            "\t// Initialize mutation types",
            "\tinitializeMutationType(\"m1\", 0.5, \"f\", 0.0);",
            "\t",
            "\t// Set up genomic elements",
            "\tinitializeGenomicElementType(\"g1\", m1, 1.0);",
            "\tinitializeGenomicElement(g1, 0, ${1:99999});",
            "\tinitializeMutationRate(${2:1e-7});",
            "\tinitializeRecombinationRate(${3:1e-8});",
            "\t",
            "\t// Define demographic events",
            "\tdefineConstant(\"N0\", ${4:10000});  // ancestral size",
            "\tdefineConstant(\"N1\", ${5:1000});   // bottleneck size",
            "\tdefineConstant(\"N2\", ${6:5000});   // recovery size",
            "\tdefineConstant(\"T1\", ${7:1000});   // bottleneck start",
            "\tdefineConstant(\"T2\", ${8:1100});   // bottleneck end",
            "}",
            "",
            "1 early() {",
            "\tsim.addSubpop(\"p1\", N0);",
            "}",
            "",
            "// Demographic events",
            "T1 early() {",
            "\tp1.setSubpopulationSize(N1);  // bottleneck",
            "\tcatn(\"Bottleneck started\");",
            "}",
            "",
            "T2 early() {",
            "\tp1.setSubpopulationSize(N2);  // recovery",
            "\tcatn(\"Recovery phase\");",
            "}",
            "",
            "// Track population statistics",
            "${9:100} late() {",
            "\tcatn(sim.generation + \": N = \" + p1.individualCount);",
            "\tcatn(\"\\tpi = \" + calcNucleotideDiversity(p1.sampleIndividuals(50)));",
            "}"
        ],
        "description": "Initialize a model with demographic events and population size changes"
    },

    "Hybrid Zone": {
        "prefix": "init-hybrid",
        "body": [
            "initialize() {",
            "\t// Initialize mutation types",
            "\tinitializeMutationType(\"m1\", 0.5, \"f\", 0.0);  // neutral",
            "\tinitializeMutationType(\"m2\", 0.5, \"n\", 0.0, ${1:0.1});  // locally adapted",
            "\t",
            "\t// Set up genomic elements",
            "\tinitializeGenomicElementType(\"g1\", c(m1,m2), c(0.9,0.1));",
            "\tinitializeGenomicElement(g1, 0, ${2:99999});",
            "\tinitializeMutationRate(${3:1e-7});",
            "\tinitializeRecombinationRate(${4:1e-8});",
            "\t",
            "\t// Set up spatial structure",
            "\tinitializeSLiMOptions(dimensionality=\"x\");",
            "}",
            "",
            "1 early() {",
            "\t// Create two populations with different adaptations",
            "\tsim.addSubpop(\"p1\", ${5:500});",
            "\tsim.addSubpop(\"p2\", ${6:500});",
            "\t",
            "\t// Set spatial boundaries",
            "\tp1.setSpatialBounds(c(0.0, 0.0), c(${7:50.0}, 0.0));",
            "\tp2.setSpatialBounds(c(${8:50.0}, 0.0), c(${9:100.0}, 0.0));",
            "\t",
            "\t// Distribute individuals",
            "\tp1.individuals.x = runif(${5:500}, min=0.0, max=${7:50.0});",
            "\tp2.individuals.x = runif(${6:500}, min=${8:50.0}, max=${9:100.0});",
            "}",
            "",
            "// Spatial competition and mating",
            "reproduction() {",
            "\tparent1 = subpop.sampleIndividuals(1);",
            "\t// Choose mate based on spatial proximity",
            "\tmates = sim.subpopulations.individuals;",
            "\tdists = abs(parent1.x - mates.x);",
            "\tmate = sample(mates, 1, weights=exp(-dists/${10:2.0}));",
            "\treturn c(parent1.index, mate.index);",
            "}",
            "",
            "// Track hybrid zone",
            "${11:100} late() {",
            "\t// Calculate allele frequencies along spatial gradient",
            "\tpos = seq(0.0, ${9:100.0}, 10.0);",
            "\tfor (x in pos) {",
            "\t\tnearby = sim.subpopulations.individuals[abs(sim.subpopulations.individuals.x - x) < 5.0];",
            "\t\tif (size(nearby)) {",
            "\t\t\tfreq = mean(sapply(nearby.genomes, \"sum(applyValue.containsMarkerMutation(m2))\"));",
            "\t\t\tcatn(\"x = \" + x + \": freq = \" + freq);",
            "\t\t}",
            "\t}",
            "}"
        ],
        "description": "Initialize a model of a hybrid zone with spatial structure"
    },

    "Advanced Statistics": {
        "prefix": "stats-advanced",
        "body": [
            "// Calculate population statistics",
            "${1:100} late() {",
            "\t// Sample individuals",
            "\tsamples = p1.sampleIndividuals(${2:50});",
            "\t",
            "\t// Basic diversity statistics",
            "\tpi = calcNucleotideDiversity(samples);",
            "\tthetaW = calcWattersonsTheta(samples);",
            "\ttajimasD = calcTajimasD(samples);",
            "\t",
            "\t// Site frequency spectrum",
            "\tsfs = calcSFS(samples);",
            "\t",
            "\t// Linkage disequilibrium",
            "\tld = calcLD(samples);",
            "\t",
            "\t// Output results",
            "\tcatn(sim.generation + \":\" +",
            "\t\t\"\\n\\tpi = \" + pi +",
            "\t\t\"\\n\\ttheta = \" + thetaW +",
            "\t\t\"\\n\\tTajima's D = \" + tajimasD +",
            "\t\t\"\\n\\tSFS = \" + paste(sfs, \" \") +",
            "\t\t\"\\n\\tmean r^2 = \" + mean(ld.r2));",
            "\t",
            "\t// Optional: write to file",
            "\twriteFile(\"${3:stats.txt}\",",
            "\t\tsim.generation + \"\\t\" + pi + \"\\t\" + thetaW + \"\\t\" + tajimasD + \"\\n\",",
            "\t\tappend=T);",
            "}"
        ],
        "description": "Add advanced population genetics statistics calculations"
    },

    "Recombination Map": {
        "prefix": "init-recomb",
        "body": [
            "initialize() {",
            "\t// Initialize mutation types",
            "\tinitializeMutationType(\"m1\", 0.5, \"f\", 0.0);",
            "\t",
            "\t// Set up genomic elements",
            "\tinitializeGenomicElementType(\"g1\", m1, 1.0);",
            "\tinitializeGenomicElement(g1, 0, ${1:99999});",
            "\t",
            "\t// Define recombination map",
            "\tpositions = c(${2:0, 25000, 50000, 75000, 100000});",
            "\trates = c(${3:1e-8, 1e-6, 1e-8, 1e-7});  // different rates between positions",
            "\tinitializeRecombinationRate(rates, positions);",
            "\t",
            "\t// Set mutation rate",
            "\tinitializeMutationRate(${4:1e-7});",
            "}",
            "",
            "1 early() {",
            "\tsim.addSubpop(\"p1\", ${5:1000});",
            "}",
            "",
            "// Track recombination events",
            "${6:100} late() {",
            "\t// Sample crossover positions",
            "\tcrossovers = sim.countOfCrossovers();",
            "\tcatn(sim.generation + \": \" + crossovers + \" crossovers\");",
            "\t",
            "\t// Optional: track recombination hotspots",
            "\tbreakpoints = sim.crossoverPositions();",
            "\thistogram = tabulate(integer(breakpoints / 1000));  // bin into 1kb windows",
            "\tcatn(\"Recombination density: \" + paste(histogram, \" \"));",
            "}"
        ],
        "description": "Initialize a model with a variable recombination rate map"
    },

    "Output VCF": {
        "prefix": "output-vcf",
        "body": [
            "${1:10000} late() {",
            "\t// Sample individuals for VCF output",
            "\tsamples = p1.sampleIndividuals(${2:50});",
            "\t",
            "\t// Generate VCF output",
            "\tsim.outputVCF(samples, filePath=\"${3:output.vcf}\",",
            "\t\tsimplifyNucleotides=${4:T},  // for nucleotide-based models",
            "\t\toutputMultiallelics=${5:T}",
            "\t);",
            "\t",
            "\t// Optional: output sample metadata",
            "\tmetadata = samples.map(\"applyValue.index + '\\t' + applyValue.subpopulation.id\");",
            "\twriteFile(\"${6:samples.txt}\", metadata, append=F);",
            "}"
        ],
        "description": "Output simulation data in VCF format with sample metadata"
    },

    "Output Custom Data": {
        "prefix": "output-custom",
        "body": [
            "${1:100} late() {",
            "\t// Initialize output file with headers if needed",
            "\tif (sim.generation == ${1:100}) {",
            "\t\theaders = \"Generation\\tN\\tMeanFitness\\tFixedMutations\\tPi\\tTajimasD\\n\";",
            "\t\twriteFile(\"${2:stats.txt}\", headers, append=F);",
            "\t}",
            "\t",
            "\t// Calculate statistics",
            "\tsamples = p1.sampleIndividuals(${3:50});",
            "\tmeanFitness = mean(p1.individuals.fitness);",
            "\tfixedMuts = size(sim.substitutions);",
            "\tpi = calcNucleotideDiversity(samples);",
            "\ttajimasD = calcTajimasD(samples);",
            "\t",
            "\t// Format and write data",
            "\tdata = paste(c(sim.generation, size(p1.individuals), meanFitness,",
            "\t\tfixedMuts, pi, tajimasD), sep=\"\\t\") + \"\\n\";",
            "\twriteFile(\"${2:stats.txt}\", data, append=T);",
            "\t",
            "\t// Optional: output full population state periodically",
            "\tif (sim.generation % ${4:1000} == 0)",
            "\t\tsim.outputFull(\"snapshot_\" + sim.generation + \".txt\");",
            "}"
        ],
        "description": "Output custom statistics and data in a structured format"
    },

    "Mutation Callback": {
        "prefix": "mutation-cb",
        "body": [
            "${1:1} mutation(m${2:1}) {",
            "\t// Access mutation properties",
            "\tpos = mut.position;",
            "\tselCoeff = mut.selectionCoeff;",
            "\t",
            "\t// Optional: track mutation origin",
            "\tif (${3:T}) {",
            "\t\tmut.tag = sim.generation;  // store generation of origin",
            "\t\tmut.setValue(\"originSubpop\", subpop.id);",
            "\t}",
            "\t",
            "\t// Optional: custom mutation effects",
            "\tif (${4:pos > 1000 & pos < 2000}) {",
            "\t\t// Modify selection coefficient based on position",
            "\t\tmut.setSelectionCoeff(${5:0.01} * exp(-abs(pos - 1500) / 500));",
            "\t}",
            "\t",
            "\t// Return T to accept mutation, F to reject",
            "\treturn ${6:T};",
            "}"
        ],
        "description": "Add a mutation callback for custom mutation handling"
    },

    "Modifying Callback": {
        "prefix": "modify-cb",
        "body": [
            "${1:1} modifyChild() {",
            "\t// Access child properties",
            "\tchildGenomes = child.genomes;",
            "\tparentIDs = sourceSubpop.individuals[childIDs].id;",
            "\t",
            "\t// Optional: track pedigree",
            "\tif (${2:T}) {",
            "\t\tchild.tag = paste(parentIDs);",
            "\t\tchild.setValue(\"maternal\", parentIDs[0]);",
            "\t\tchild.setValue(\"paternal\", parentIDs[1]);",
            "\t}",
            "\t",
            "\t// Optional: modify child properties",
            "\tif (${3:child.sex == \"F\"}) {",
            "\t\t// Example: sex-specific effects",
            "\t\tchild.tagF = ${4:1.0};",
            "\t}",
            "\t",
            "\t// Return the modified child (or NULL to reject)",
            "\treturn ${5:child};",
            "}"
        ],
        "description": "Add a modifyChild() callback for custom offspring modification"
    },

    "Interaction Callback": {
        "prefix": "interaction-cb",
        "body": [
            "${1:1} interaction(${2:i1}, ${3:i2}) {",
            "\t// Calculate spatial distance",
            "\tdist = sqrt(sum((i1.spatialPosition - i2.spatialPosition)^2));",
            "\t",
            "\t// Calculate interaction strength",
            "\tstrength = ${4:1.0} * exp(-dist / ${5:2.0});",
            "\t",
            "\t// Optional: competition based on phenotype similarity",
            "\tif (${6:T}) {",
            "\t\tphen1 = sum(i1.genomes.mutationsOfType(m1).selectionCoeff);",
            "\t\tphen2 = sum(i2.genomes.mutationsOfType(m1).selectionCoeff);",
            "\t\tstrength = strength * (1 - abs(phen1 - phen2) / ${7:1.0});",
            "\t}",
            "\t",
            "\t// Return interaction strength",
            "\treturn strength;",
            "}"
        ],
        "description": "Add an interaction() callback for spatial or phenotypic interactions"
    },

    "Periodic Events": {
        "prefix": "periodic",
        "body": [
            "${1:1}:${2:10000} ${3:late}() {",
            "\t// Check if this is a sampling generation",
            "\tif (sim.generation % ${4:100} == 0) {",
            "\t\t// Periodic sampling code",
            "\t\tsamples = p1.sampleIndividuals(${5:50});",
            "\t\t",
            "\t\t// Calculate statistics",
            "\t\tpi = calcNucleotideDiversity(samples);",
            "\t\tfst = calcFST(p1.sampleIndividuals(25), p2.sampleIndividuals(25));",
            "\t\t",
            "\t\t// Output results",
            "\t\tcatn(sim.generation + \"\\t\" + pi + \"\\t\" + fst);",
            "\t}",
            "\t",
            "\t// Check for environmental change",
            "\tif (sim.generation % ${6:1000} == 0) {",
            "\t\t// Modify selection pressures",
            "\t\tm2.setSelectionCoeff(${7:rnorm(1, 0.1, 0.02)});",
            "\t\tcatn(\"Selection coefficient changed to \" + m2.selectionCoeff);",
            "\t}",
            "\t",
            "\t// Optional: check for simulation termination",
            "\tif (${8:mean(p1.individuals.fitness) > 2.0}) {",
            "\t\tsim.simulationFinished();",
            "\t}",
            "}"
        ],
        "description": "Add periodic events for sampling, environmental changes, and termination conditions"
    },

    "Population Split": {
        "prefix": "pop-split",
        "body": [
            "${1:1000} early() {",
            "\t// Store original population size",
            "\toldSize = p1.individualCount;",
            "\t",
            "\t// Create new population",
            "\tsim.addSubpop(\"p${2:2}\", asInteger(oldSize * ${3:0.5}));",
            "\t",
            "\t// Resize original population",
            "\tp1.setSubpopulationSize(asInteger(oldSize * (1 - ${3:0.5})));",
            "\t",
            "\t// Optional: set up migration",
            "\tp1.setMigrationRates(p${2:2}, ${4:0.01});",
            "\tp${2:2}.setMigrationRates(p1, ${4:0.01});",
            "\t",
            "\t// Optional: modify selection in new population",
            "\tif (${5:T}) {",
            "\t\t// Example: different selection pressure",
            "\t\tp${2:2}.individuals.fitnessScaling = ${6:1.1};",
            "\t}",
            "\t",
            "\tcatn(\"Population split complete at generation \" + sim.generation);",
            "}"
        ],
        "description": "Add a population split event with optional migration and selection changes"
    },

    "Fitness Scaling": {
        "prefix": "fitness-scaling",
        "body": [
            "${1:1} early() {",
            "\t// Define environmental optimum",
            "\tdefineConstant(\"OPT\", ${2:10.0});",
            "\t",
            "\t// Calculate distance from optimum for each individual",
            "\tfor (ind in sim.subpopulations.individuals) {",
            "\t\t// Get phenotype",
            "\t\tphenotype = sum(ind.genomes.mutationsOfType(m1).selectionCoeff);",
            "\t\t",
            "\t\t// Calculate fitness scaling based on distance from optimum",
            "\t\tdistance = abs(phenotype - OPT);",
            "\t\tscaling = exp(-distance^2 / (2 * ${3:5.0}^2));",
            "\t\t",
            "\t\t// Apply scaling",
            "\t\tind.fitnessScaling = scaling;",
            "\t}",
            "\t",
            "\t// Optional: track population fitness",
            "\tif (${4:sim.generation % 100 == 0}) {",
            "\t\tmeanFitness = mean(sim.subpopulations.individuals.fitnessScaling);",
            "\t\tcatn(sim.generation + \": mean fitness scaling = \" + meanFitness);",
            "\t}",
            "}"
        ],
        "description": "Add custom fitness scaling based on phenotype and environmental optimum"
    }
} 